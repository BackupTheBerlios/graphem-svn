0.2:
make Auth a base class
check if input is valid when using --pattern
can i optimize the tryPattern() algorithm so patterns are tried in order of likelihood?

creating a new auth pattern:
	estimate entropy of input
	repeat input a few times, try to find common elements
	maybe generate a random pattern instead of recording
	display recognized strokes (startpos, length, direction)

0.3:
create documentation
config file?
create real gui
	create/record pattern
	try pattern a few times
	offer to save pattern

?:
support real handwriting
	try different algorithms for Auth module:
	fcc-codes (current implementation):
		doesn't seem to be very reliable (why?)
		- useless for handwriting, kanji
		+ simple geometric patterns work
	maybe something else:
		element: cusp, straight line, loop; also store direction
		still missing velocity, probably helpful
use pattern to access encryption key, should be possible with QCA
don't show mouse cursor, maybe only record relative movements (except for tablets)?

does hashing really make sense? Find out just what part of the total keyspace we have to try on average...
if a pattern is supposed to be secure, we can only try a number of keys which is many orders of magnitude less

