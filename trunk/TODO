0.3:
"red" strokes require two clicks to remove instead of one
can i optimize the tryPattern() algorithm so patterns are tried in order of likelihood?
make preprocess() suck less, use velocity to determine averaging
create documentation (site)
generate random pattern
estimate entropy of input
is QCA's rng enough?
check return codes.
benchmark.

?:
l10n
create test cases for specific inputs
(!) search for straight lines and assign a direction to the whole thing. should help with 22 degree lines
do some benchmarking
	test wether manual inlining makes sense
	test if hash comparison can be optimized (QByteArray vs. QString vs ?)
	QCryptoGraphicHash vs QCA::Hash
make Auth a base class
support real handwriting
	try different algorithms for Auth module:
	fcc-codes (current implementation):
		doesn't seem to be very reliable (why?)
		- useless for handwriting, kanji
		+ simple geometric patterns work
	maybe something else:
		element: cusp, straight line, loop; also store direction
		still missing velocity, probably helpful
use pattern to access encryption key, should be possible with QCA
add fancy graphics to auth dialog
maybe separate ASK/LOCK binaries - if the whole package is too large
don't show mouse cursor, maybe only record relative movements (except for tablets)?
or center cursor after fail? (again, not for tablets)
