input, segmented by pen up events
note that the last input contains an additional #, should be discarded
0_7_3#6_1#7_6_0_5#6_4_2#1_7_6_5_0_4#0_5#      7_0_5#  0_1_3#5_1#      7_0_
0_3#6_1#  6_4#    6_0_2#1_7_6_5_4#  0_1_5#    7_0_7_5#0_3#  5_6_5_0_1#7_
0_3#6_1#  6_5#    6_2#  1_7_6_5_3#  0_5#      0_1_7_5#7_0_2#5_6_5_1#  7_0_
0_4#6_1#  6_5#    6_2#  1_6_5_3#    0_7_5#    0_5#    7_0_4#5_1#      7_
0_7_3#0_5#6_1#    6_0_5#6_2#        1_0_6_5_3#7_0_5#7_5#0_2#5_0_1#    7_0_

resulting simplified pattern:
0_3#6_1#  6_5#    6_2#  1_7_6_5_3#  0_1_5#    7_0_5#  0_3#  5_1#      7_
sans spaces:
0_3#6_1#6_5#6_2#1_7_6_5_3#0_1_5#7_0_5#0_3#5_1#7_


the result isn't too bad, considering no information on length, duration, etc. has been used
our algorithm should group the patterns using pen up/down events, and then create some sort of average over the number of "strokes" between each pen-up, and averaging the directions
it's preferred that this produces a shorter pattern so our brute force checking still works
